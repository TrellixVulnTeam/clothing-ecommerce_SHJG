{"ast":null,"code":"var _jsxFileName = \"/mnt/primary/my-project/Practices/React/clothing-ecommerce/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { Routes, Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport { collection, firestore, onSnapshot, convertCollectionsSnapShotToMap, getDocs } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport './shop.styles.scss';\nimport CollectionPage from \"../collection/collection.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapShot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = collection(firestore, 'collections'); // this.unsubscribeFromSnapShot = onSnapshot(collectionRef, (snapShot) => {\n    //   const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false })\n    // });\n\n    getDocs(collectionRef).then(snapShot => {\n      const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n    console.log('abc');\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapShot();\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n            isLoading: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:collectionId\",\n          element: /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n            isLoading: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/mnt/primary/my-project/Practices/React/clothing-ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","connect","WithSpinner","Routes","Route","CollectionsOverview","collection","firestore","onSnapshot","convertCollectionsSnapShotToMap","getDocs","updateCollections","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapShot","componentDidMount","props","collectionRef","then","snapShot","collectionsMap","setState","console","log","componentWillUnmount","render","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,+BAA5C,EAA6EC,OAA7E,QAA4F,+BAA5F;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAO,oBAAP;AACA,OAAOC,cAAP,MAA2B,oCAA3B;;AAEA,MAAMC,8BAA8B,GAAGX,WAAW,CAACG,mBAAD,CAAlD;KAAMQ,8B;AACN,MAAMC,yBAAyB,GAAGZ,WAAW,CAACU,cAAD,CAA7C;MAAME,yB;;AACN,MAAMC,QAAN,SAAuBf,KAAK,CAACgB,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD6B;AAAA,SAKrCC,uBALqC,GAKX,IALW;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAET,MAAAA;AAAF,QAAwB,KAAKU,KAAnC;AACA,UAAMC,aAAa,GAAGhB,UAAU,CAACC,SAAD,EAAY,aAAZ,CAAhC,CAFkB,CAGlB;AACA;AACA;AACA;AACA;;AACAG,IAAAA,OAAO,CAACY,aAAD,CAAP,CAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AACxC,YAAMC,cAAc,GAAGhB,+BAA+B,CAACe,QAAD,CAAtD;AACAb,MAAAA,iBAAiB,CAACc,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAJD;AAKAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKV,uBAAL;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,8BAAD;AAAgC,YAAA,SAAS,EAAEC;AAA3C;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,gBAAZ;AAA6B,UAAA,OAAO,eAAE,QAAC,yBAAD;AAA2B,YAAA,SAAS,EAAEA;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AArCoC;;AAyCvC,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACtCrB,EAAAA,iBAAiB,EAAEc,cAAc,IAAIO,QAAQ,CAACrB,iBAAiB,CAAEc,cAAF,CAAlB;AADP,CAAL,CAAnC;;AAIA,eAAexB,OAAO,CAAC,IAAD,EAAO8B,kBAAP,CAAP,CAAkChB,QAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { Routes, Route } from \"react-router-dom\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport { collection, firestore, onSnapshot, convertCollectionsSnapShotToMap, getDocs } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\n\nimport './shop.styles.scss';\nimport CollectionPage from \"../collection/collection.component\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\nclass ShopPage extends React.Component {\n  state = {\n    loading: true,\n  }\n\n  unsubscribeFromSnapShot = null;\n\n  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionRef = collection(firestore, 'collections');\n    // this.unsubscribeFromSnapShot = onSnapshot(collectionRef, (snapShot) => {\n    //   const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false })\n    // });\n    getDocs(collectionRef).then((snapShot) => {\n      const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false })\n    })\n    console.log('abc')\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapShot();\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div className=\"shop-page\">\n        <Routes>\n          <Route path=\"/\" element={<CollectionsOverviewWithSpinner isLoading={loading} />} />\n          <Route path=\"/:collectionId\" element={<CollectionPageWithSpinner isLoading={loading} />} />\n        </Routes>\n      </div>\n    )\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections((collectionsMap)))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}