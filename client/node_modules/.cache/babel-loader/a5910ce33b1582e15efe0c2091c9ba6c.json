{"ast":null,"code":"var _jsxFileName = \"/mnt/primary/my-project/Practices/React/clothing-ecommerce/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport { collection, firestore, onSnapshot, convertCollectionsSnapShotToMap } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport './shop.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ShopPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapShot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = collection(firestore, 'collections');\n    onSnapshot(collectionRef, snapShot => {\n      const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n      updateCollections(collectionsMap);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(CollectionsOverview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/mnt/primary/my-project/Practices/React/clothing-ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","connect","WithSpinner","CollectionsOverview","collection","firestore","onSnapshot","convertCollectionsSnapShotToMap","updateCollections","ShopPage","Component","state","loading","unsubscribeFromSnapShot","componentDidMount","props","collectionRef","snapShot","collectionsMap","render","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,+BAA5C,QAAmF,+BAAnF;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAO,oBAAP;;;AAEA,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD6B;AAAA,SAIrCC,uBAJqC,GAIX,IAJW;AAAA;;AAMrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEN,MAAAA;AAAF,QAAwB,KAAKO,KAAnC;AACA,UAAMC,aAAa,GAAGZ,UAAU,CAACC,SAAD,EAAY,aAAZ,CAAhC;AACAC,IAAAA,UAAU,CAACU,aAAD,EAAiBC,QAAD,IAAc;AACtC,YAAMC,cAAc,GAAGX,+BAA+B,CAACU,QAAD,CAAtD;AACAT,MAAAA,iBAAiB,CAACU,cAAD,CAAjB;AACD,KAHS,CAAV;AAID;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AArBoC;;AAyBvC,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCb,EAAAA,iBAAiB,EAAEU,cAAc,IAAIG,QAAQ,CAACb,iBAAiB,CAAEU,cAAF,CAAlB;AADP,CAAL,CAAnC;;AAIA,eAAejB,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkCX,QAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport { collection, firestore, onSnapshot, convertCollectionsSnapShotToMap } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\n\nimport './shop.styles.scss';\n\nclass ShopPage extends React.Component {\n  state = {\n    loading: true,\n  }\n  unsubscribeFromSnapShot = null;\n\n  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionRef = collection(firestore, 'collections');\n    onSnapshot(collectionRef, (snapShot) => {\n      const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n      updateCollections(collectionsMap);\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"shop-page\">\n        <CollectionsOverview />\n      </div>\n    )\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections((collectionsMap)))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}